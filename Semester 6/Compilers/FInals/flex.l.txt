/*
        --FLEX--
        
    Κούμανης Βασίλειος 
    6ο Εξάμηνο 
    5ετές - Πα.Δ.Α.

    9
*/
%option noyywrap
%x error

%{

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* Header file that contains all the tokens (if we dont have access to BISON)*/
#include "token.h"

/*counters & variables*/
int line = 1;
int inv_word;

%}

OP_PLUS		(\+)
OP_MINUS	(\-)
OP_MULT		(\*)
OP_DIVIDE	(\/)
BINARY          (0|1){2}
CHARACTER       ({[a-z]|[A-Z]})+
IGNORE          ([a-z]|[A-Z])+
%%

{OP_PLUS}	{ return OP_PLUS; }
{OP_MINUS}	{ return OP_MINUS; }
{OP_MULT}	{ return OP_MULT; }
{OP_DIVIDE}     { return OP_DIVIDE; }
{CHARACTER}     { printf(" FOUND CHAR "); return CHARACTER; }
{BINARY}        { return BINARY; }
{IGNORE}        {printf(" FLEX: << ERROR >>\n"); BEGIN(error);  inv_word++; return UNKNOWN;}


.		{ printf(" FLEX: << ERROR >>\n"); BEGIN(error);  inv_word++; return UNKNOWN; }
<error>[ \t]+	{ BEGIN(0); }
<error>.	{ inv_word++; }
<error>\n	{ BEGIN(0);line++;printf("\n"); }

\n		{ line++; printf("\n"); } 

<<EOF>>		{ printf("<< END-OF-FILE >>\n"); exit(0); }



%%

/* Char array that contains all the tokens from token.h*/
char *tname[8] = {"NUM","UNKNOWN", "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIVIDE", "CHARACTER", "BINARY"};

int main(int argc, char **argv){
        int token;

  /*      if(argc == 3){
                if(!(yyin = fopen(argv[1], "r"))) {
                        fprintf(stderr, "Cannot read file: %s\n", argv[1]);
                        return 1;
                }
                if(!(yyout = fopen(argv[2], "w"))) {
                        fprintf(stderr, "Cannot create file: %s\n", argv[2]);
                        return 1;
                }
        }
        else if(argc == 2){
                if(!(yyin = fopen(argv[1], "r"))) {
                        fprintf(stderr, "Cannot read file: %s\n", argv[1]);
                        return 1;
                }
        }*/

        while( (token=yylex()) >= 0){
                /* For each token it prints the line, the token, and the value that the token 'contains'*/
                fprintf(yyout, "\tLine=%d, token=%s, value=\"%s\"\n", line, tname[token-1], yytext);
        }
        return 0;
}