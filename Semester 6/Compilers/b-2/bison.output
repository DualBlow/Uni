State 37 conflicts: 4 shift/reduce
State 45 conflicts: 2 shift/reduce
State 47 conflicts: 2 shift/reduce
State 61 conflicts: 2 shift/reduce
State 69 conflicts: 2 shift/reduce
State 75 conflicts: 1 shift/reduce
State 80 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program PAREN_L define
    2        | program PAREN_L fact PAREN_R
    3        | program prepare_calc
    4        | program PAREN_L OP_EQUAL compare PAREN_R
    5        | %empty

    6 define: DEF_RULE statement PRINT_TEXT print PAREN_R PAREN_R
    7       | DEF_FACT statement PAREN_R
    8       | test PAREN_R
    9       | bind PAREN_R

   10 print: PAREN_L text PAREN_R
   11      | print print

   12 text: STRING
   13     | VARIABLE
   14     | text text

   15 statement: NAME statement
   16          | PAREN_L fact PAREN_R
   17          | PAREN_L test PAREN_R ARROW PAREN_L
   18          | statement statement

   19 fact: NAME
   20     | VARIABLE
   21     | value
   22     | fact fact

   23 value: INTCONST
   24      | FLOAT_POINT

   25 test: TEST PAREN_L OP_EQUAL compare PAREN_R

   26 compare: argument prepare_calc
   27        | prepare_calc argument
   28        | VARIABLE INTCONST
   29        | INTCONST VARIABLE

   30 argument: VARIABLE
   31         | INTCONST

   32 prepare_calc: PAREN_L operator calc calc PAREN_R

   33 operator: OP_PLUS
   34         | OP_MINUS
   35         | OP_MULT
   36         | OP_DIVIDE

   37 calc: INTCONST
   38     | VARIABLE
   39     | calc calc

   40 bind: BIND VARIABLE content
   41     | BIND VARIABLE INTCONST

   42 content: PAREN_L READ_TEXT PAREN_R
   43        | prepare_calc


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PAREN_L (258) 1 2 4 10 16 17 25 32 42
    PAREN_R (259) 2 4 6 7 8 9 10 16 17 25 32 42
    ARROW (260) 17
    INTCONST (261) 23 28 29 31 37 41
    FLOAT_POINT (262) 24
    DEF_FACT (263) 7
    DEF_RULE (264) 6
    TEST (265) 25
    BIND (266) 40 41
    READ_TEXT (267) 42
    PRINT_TEXT (268) 6
    NAME (269) 15 19
    VARIABLE (270) 13 20 28 29 30 38 40 41
    STRING (271) 12
    OP_EQUAL (272) 4 25
    OP_PLUS (273) 33
    OP_MINUS (274) 34
    OP_MULT (275) 35
    OP_DIVIDE (276) 36


Nonterminals, with rules where they appear

    $accept (22)
        on left: 0
    program (23)
        on left: 1 2 3 4 5
        on right: 0 1 2 3 4
    define (24)
        on left: 6 7 8 9
        on right: 1
    print (25)
        on left: 10 11
        on right: 6 11
    text (26)
        on left: 12 13 14
        on right: 10 14
    statement (27)
        on left: 15 16 17 18
        on right: 6 7 15 18
    fact (28)
        on left: 19 20 21 22
        on right: 2 16 22
    value (29)
        on left: 23 24
        on right: 21
    test (30)
        on left: 25
        on right: 8 17
    compare (31)
        on left: 26 27 28 29
        on right: 4 25
    argument (32)
        on left: 30 31
        on right: 26 27
    prepare_calc (33)
        on left: 32
        on right: 3 26 27 43
    operator (34)
        on left: 33 34 35 36
        on right: 32
    calc (35)
        on left: 37 38 39
        on right: 32 39
    bind (36)
        on left: 40 41
        on right: 9
    content (37)
        on left: 42 43
        on right: 40


State 0

    0 $accept: . program $end

    $default  reduce using rule 5 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . PAREN_L define
    2        | program . PAREN_L fact PAREN_R
    3        | program . prepare_calc
    4        | program . PAREN_L OP_EQUAL compare PAREN_R

    $end     shift, and go to state 2
    PAREN_L  shift, and go to state 3

    prepare_calc  go to state 4


State 2

    0 $accept: program $end .

    $default  accept


State 3

    1 program: program PAREN_L . define
    2        | program PAREN_L . fact PAREN_R
    4        | program PAREN_L . OP_EQUAL compare PAREN_R
   32 prepare_calc: PAREN_L . operator calc calc PAREN_R

    INTCONST     shift, and go to state 5
    FLOAT_POINT  shift, and go to state 6
    DEF_FACT     shift, and go to state 7
    DEF_RULE     shift, and go to state 8
    TEST         shift, and go to state 9
    BIND         shift, and go to state 10
    NAME         shift, and go to state 11
    VARIABLE     shift, and go to state 12
    OP_EQUAL     shift, and go to state 13
    OP_PLUS      shift, and go to state 14
    OP_MINUS     shift, and go to state 15
    OP_MULT      shift, and go to state 16
    OP_DIVIDE    shift, and go to state 17

    define    go to state 18
    fact      go to state 19
    value     go to state 20
    test      go to state 21
    operator  go to state 22
    bind      go to state 23


State 4

    3 program: program prepare_calc .

    $default  reduce using rule 3 (program)


State 5

   23 value: INTCONST .

    $default  reduce using rule 23 (value)


State 6

   24 value: FLOAT_POINT .

    $default  reduce using rule 24 (value)


State 7

    7 define: DEF_FACT . statement PAREN_R

    PAREN_L  shift, and go to state 24
    NAME     shift, and go to state 25

    statement  go to state 26


State 8

    6 define: DEF_RULE . statement PRINT_TEXT print PAREN_R PAREN_R

    PAREN_L  shift, and go to state 24
    NAME     shift, and go to state 25

    statement  go to state 27


State 9

   25 test: TEST . PAREN_L OP_EQUAL compare PAREN_R

    PAREN_L  shift, and go to state 28


State 10

   40 bind: BIND . VARIABLE content
   41     | BIND . VARIABLE INTCONST

    VARIABLE  shift, and go to state 29


State 11

   19 fact: NAME .

    $default  reduce using rule 19 (fact)


State 12

   20 fact: VARIABLE .

    $default  reduce using rule 20 (fact)


State 13

    4 program: program PAREN_L OP_EQUAL . compare PAREN_R

    PAREN_L   shift, and go to state 30
    INTCONST  shift, and go to state 31
    VARIABLE  shift, and go to state 32

    compare       go to state 33
    argument      go to state 34
    prepare_calc  go to state 35


State 14

   33 operator: OP_PLUS .

    $default  reduce using rule 33 (operator)


State 15

   34 operator: OP_MINUS .

    $default  reduce using rule 34 (operator)


State 16

   35 operator: OP_MULT .

    $default  reduce using rule 35 (operator)


State 17

   36 operator: OP_DIVIDE .

    $default  reduce using rule 36 (operator)


State 18

    1 program: program PAREN_L define .

    $default  reduce using rule 1 (program)


State 19

    2 program: program PAREN_L fact . PAREN_R
   22 fact: fact . fact

    PAREN_R      shift, and go to state 36
    INTCONST     shift, and go to state 5
    FLOAT_POINT  shift, and go to state 6
    NAME         shift, and go to state 11
    VARIABLE     shift, and go to state 12

    fact   go to state 37
    value  go to state 20


State 20

   21 fact: value .

    $default  reduce using rule 21 (fact)


State 21

    8 define: test . PAREN_R

    PAREN_R  shift, and go to state 38


State 22

   32 prepare_calc: PAREN_L operator . calc calc PAREN_R

    INTCONST  shift, and go to state 39
    VARIABLE  shift, and go to state 40

    calc  go to state 41


State 23

    9 define: bind . PAREN_R

    PAREN_R  shift, and go to state 42


State 24

   16 statement: PAREN_L . fact PAREN_R
   17          | PAREN_L . test PAREN_R ARROW PAREN_L

    INTCONST     shift, and go to state 5
    FLOAT_POINT  shift, and go to state 6
    TEST         shift, and go to state 9
    NAME         shift, and go to state 11
    VARIABLE     shift, and go to state 12

    fact   go to state 43
    value  go to state 20
    test   go to state 44


State 25

   15 statement: NAME . statement

    PAREN_L  shift, and go to state 24
    NAME     shift, and go to state 25

    statement  go to state 45


State 26

    7 define: DEF_FACT statement . PAREN_R
   18 statement: statement . statement

    PAREN_L  shift, and go to state 24
    PAREN_R  shift, and go to state 46
    NAME     shift, and go to state 25

    statement  go to state 47


State 27

    6 define: DEF_RULE statement . PRINT_TEXT print PAREN_R PAREN_R
   18 statement: statement . statement

    PAREN_L     shift, and go to state 24
    PRINT_TEXT  shift, and go to state 48
    NAME        shift, and go to state 25

    statement  go to state 47


State 28

   25 test: TEST PAREN_L . OP_EQUAL compare PAREN_R

    OP_EQUAL  shift, and go to state 49


State 29

   40 bind: BIND VARIABLE . content
   41     | BIND VARIABLE . INTCONST

    PAREN_L   shift, and go to state 50
    INTCONST  shift, and go to state 51

    prepare_calc  go to state 52
    content       go to state 53


State 30

   32 prepare_calc: PAREN_L . operator calc calc PAREN_R

    OP_PLUS    shift, and go to state 14
    OP_MINUS   shift, and go to state 15
    OP_MULT    shift, and go to state 16
    OP_DIVIDE  shift, and go to state 17

    operator  go to state 22


State 31

   29 compare: INTCONST . VARIABLE
   31 argument: INTCONST .

    VARIABLE  shift, and go to state 54

    $default  reduce using rule 31 (argument)


State 32

   28 compare: VARIABLE . INTCONST
   30 argument: VARIABLE .

    INTCONST  shift, and go to state 55

    $default  reduce using rule 30 (argument)


State 33

    4 program: program PAREN_L OP_EQUAL compare . PAREN_R

    PAREN_R  shift, and go to state 56


State 34

   26 compare: argument . prepare_calc

    PAREN_L  shift, and go to state 30

    prepare_calc  go to state 57


State 35

   27 compare: prepare_calc . argument

    INTCONST  shift, and go to state 58
    VARIABLE  shift, and go to state 59

    argument  go to state 60


State 36

    2 program: program PAREN_L fact PAREN_R .

    $default  reduce using rule 2 (program)


State 37

   22 fact: fact . fact
   22     | fact fact .

    INTCONST     shift, and go to state 5
    FLOAT_POINT  shift, and go to state 6
    NAME         shift, and go to state 11
    VARIABLE     shift, and go to state 12

    INTCONST     [reduce using rule 22 (fact)]
    FLOAT_POINT  [reduce using rule 22 (fact)]
    NAME         [reduce using rule 22 (fact)]
    VARIABLE     [reduce using rule 22 (fact)]
    $default     reduce using rule 22 (fact)

    fact   go to state 37
    value  go to state 20


State 38

    8 define: test PAREN_R .

    $default  reduce using rule 8 (define)


State 39

   37 calc: INTCONST .

    $default  reduce using rule 37 (calc)


State 40

   38 calc: VARIABLE .

    $default  reduce using rule 38 (calc)


State 41

   32 prepare_calc: PAREN_L operator calc . calc PAREN_R
   39 calc: calc . calc

    INTCONST  shift, and go to state 39
    VARIABLE  shift, and go to state 40

    calc  go to state 61


State 42

    9 define: bind PAREN_R .

    $default  reduce using rule 9 (define)


State 43

   16 statement: PAREN_L fact . PAREN_R
   22 fact: fact . fact

    PAREN_R      shift, and go to state 62
    INTCONST     shift, and go to state 5
    FLOAT_POINT  shift, and go to state 6
    NAME         shift, and go to state 11
    VARIABLE     shift, and go to state 12

    fact   go to state 37
    value  go to state 20


State 44

   17 statement: PAREN_L test . PAREN_R ARROW PAREN_L

    PAREN_R  shift, and go to state 63


State 45

   15 statement: NAME statement .
   18          | statement . statement

    PAREN_L  shift, and go to state 24
    NAME     shift, and go to state 25

    PAREN_L   [reduce using rule 15 (statement)]
    NAME      [reduce using rule 15 (statement)]
    $default  reduce using rule 15 (statement)

    statement  go to state 47


State 46

    7 define: DEF_FACT statement PAREN_R .

    $default  reduce using rule 7 (define)


State 47

   18 statement: statement . statement
   18          | statement statement .

    PAREN_L  shift, and go to state 24
    NAME     shift, and go to state 25

    PAREN_L   [reduce using rule 18 (statement)]
    NAME      [reduce using rule 18 (statement)]
    $default  reduce using rule 18 (statement)

    statement  go to state 47


State 48

    6 define: DEF_RULE statement PRINT_TEXT . print PAREN_R PAREN_R

    PAREN_L  shift, and go to state 64

    print  go to state 65


State 49

   25 test: TEST PAREN_L OP_EQUAL . compare PAREN_R

    PAREN_L   shift, and go to state 30
    INTCONST  shift, and go to state 31
    VARIABLE  shift, and go to state 32

    compare       go to state 66
    argument      go to state 34
    prepare_calc  go to state 35


State 50

   32 prepare_calc: PAREN_L . operator calc calc PAREN_R
   42 content: PAREN_L . READ_TEXT PAREN_R

    READ_TEXT  shift, and go to state 67
    OP_PLUS    shift, and go to state 14
    OP_MINUS   shift, and go to state 15
    OP_MULT    shift, and go to state 16
    OP_DIVIDE  shift, and go to state 17

    operator  go to state 22


State 51

   41 bind: BIND VARIABLE INTCONST .

    $default  reduce using rule 41 (bind)


State 52

   43 content: prepare_calc .

    $default  reduce using rule 43 (content)


State 53

   40 bind: BIND VARIABLE content .

    $default  reduce using rule 40 (bind)


State 54

   29 compare: INTCONST VARIABLE .

    $default  reduce using rule 29 (compare)


State 55

   28 compare: VARIABLE INTCONST .

    $default  reduce using rule 28 (compare)


State 56

    4 program: program PAREN_L OP_EQUAL compare PAREN_R .

    $default  reduce using rule 4 (program)


State 57

   26 compare: argument prepare_calc .

    $default  reduce using rule 26 (compare)


State 58

   31 argument: INTCONST .

    $default  reduce using rule 31 (argument)


State 59

   30 argument: VARIABLE .

    $default  reduce using rule 30 (argument)


State 60

   27 compare: prepare_calc argument .

    $default  reduce using rule 27 (compare)


State 61

   32 prepare_calc: PAREN_L operator calc calc . PAREN_R
   39 calc: calc . calc
   39     | calc calc .

    PAREN_R   shift, and go to state 68
    INTCONST  shift, and go to state 39
    VARIABLE  shift, and go to state 40

    INTCONST  [reduce using rule 39 (calc)]
    VARIABLE  [reduce using rule 39 (calc)]

    calc  go to state 69


State 62

   16 statement: PAREN_L fact PAREN_R .

    $default  reduce using rule 16 (statement)


State 63

   17 statement: PAREN_L test PAREN_R . ARROW PAREN_L

    ARROW  shift, and go to state 70


State 64

   10 print: PAREN_L . text PAREN_R

    VARIABLE  shift, and go to state 71
    STRING    shift, and go to state 72

    text  go to state 73


State 65

    6 define: DEF_RULE statement PRINT_TEXT print . PAREN_R PAREN_R
   11 print: print . print

    PAREN_L  shift, and go to state 64
    PAREN_R  shift, and go to state 74

    print  go to state 75


State 66

   25 test: TEST PAREN_L OP_EQUAL compare . PAREN_R

    PAREN_R  shift, and go to state 76


State 67

   42 content: PAREN_L READ_TEXT . PAREN_R

    PAREN_R  shift, and go to state 77


State 68

   32 prepare_calc: PAREN_L operator calc calc PAREN_R .

    $default  reduce using rule 32 (prepare_calc)


State 69

   39 calc: calc . calc
   39     | calc calc .

    INTCONST  shift, and go to state 39
    VARIABLE  shift, and go to state 40

    INTCONST  [reduce using rule 39 (calc)]
    VARIABLE  [reduce using rule 39 (calc)]
    $default  reduce using rule 39 (calc)

    calc  go to state 69


State 70

   17 statement: PAREN_L test PAREN_R ARROW . PAREN_L

    PAREN_L  shift, and go to state 78


State 71

   13 text: VARIABLE .

    $default  reduce using rule 13 (text)


State 72

   12 text: STRING .

    $default  reduce using rule 12 (text)


State 73

   10 print: PAREN_L text . PAREN_R
   14 text: text . text

    PAREN_R   shift, and go to state 79
    VARIABLE  shift, and go to state 71
    STRING    shift, and go to state 72

    text  go to state 80


State 74

    6 define: DEF_RULE statement PRINT_TEXT print PAREN_R . PAREN_R

    PAREN_R  shift, and go to state 81


State 75

   11 print: print . print
   11      | print print .

    PAREN_L  shift, and go to state 64

    PAREN_L   [reduce using rule 11 (print)]
    $default  reduce using rule 11 (print)

    print  go to state 75


State 76

   25 test: TEST PAREN_L OP_EQUAL compare PAREN_R .

    $default  reduce using rule 25 (test)


State 77

   42 content: PAREN_L READ_TEXT PAREN_R .

    $default  reduce using rule 42 (content)


State 78

   17 statement: PAREN_L test PAREN_R ARROW PAREN_L .

    $default  reduce using rule 17 (statement)


State 79

   10 print: PAREN_L text PAREN_R .

    $default  reduce using rule 10 (print)


State 80

   14 text: text . text
   14     | text text .

    VARIABLE  shift, and go to state 71
    STRING    shift, and go to state 72

    VARIABLE  [reduce using rule 14 (text)]
    STRING    [reduce using rule 14 (text)]
    $default  reduce using rule 14 (text)

    text  go to state 80


State 81

    6 define: DEF_RULE statement PRINT_TEXT print PAREN_R PAREN_R .

    $default  reduce using rule 6 (define)
